% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extra_eval.R
\name{extra_eval}
\alias{extra_eval}
\title{Measure model extrapolation}
\usage{
extra_eval(env_calib, env_proj, n_cores = 1, aggreg_factor = 1)
}
\arguments{
\item{env_calib}{SpatRaster or tibble with environmental conditions of the calibration area or the
presence and absence (or background points or pseudo-absences) used for constructing models}

\item{env_proj}{SpatRaster with environmental condition used for projecting a model (e.g., a larger, encompassing region, a spatially separate region, or a different time period)}

\item{n_cores}{numeric. Number of cores use for parallelization. Default 1}

\item{aggreg_factor}{positive integer. Aggregation factor expressed as number of cells in each
direction to reduce raster resolution. Use value higher than 1 would be useful when
measuring extrapolation using a raster with a high number of cells. The resolution of output will be
the same as raster object used in 'env_proj' argument. Default 1, i.e., by default, no changes
will be made to the resolution of the environmental variables.}
}
\value{
A SpatRaster object with extrapolation values measured in percentage of extrapolation (relative Euclidean distance)
}
\description{
Measure extrapolation comparing environmental data used for modeling calibration and area for
model projection. This function use the approach proposed by Velazco et al., in prep
(EXPERIMENTAL)
}
\examples{
\dontrun{
require(dplyr)
require(terra)

data(spp)
f <- system.file("external/somevar.tif", package = "flexsdm")
somevar <- terra::rast(f)

spp$species \%>\% unique()
sp <- spp \%>\%
  dplyr::filter(species == "sp3", pr_ab == 1) \%>\%
  dplyr::select(x, y, pr_ab)

# Calibration area based on some criterion such as dispersal ability
ca <- calib_area(sp, x = "x", y = "y", method = c("bmcp", width = 50000), crs = crs(somevar))

plot(somevar$CFP_1)
points(sp)
plot(ca, add = T)


# Sampling pseudo-absences
set.seed(10)
psa <- sample_pseudoabs(
data = sp,
x = "x",
y = "y",
n = nrow(sp) * 2 , # selecting number of pseudo-absence points twice number of presences
method = "random",
rlayer = somevar,
calibarea = ca
)

# Merge presences and abasences databases to get a complete calibration data
sp_pa <- dplyr::bind_rows(sp, psa)
sp_pa

# Get environmental condition of calibration area
sp_pa_2 <- sdm_extract(data = sp_pa, x = "x", y = "y", env_layer = somevar)
sp_pa_2

# Measure extrapolation based on calibration data (presence and pseudo-absences)
xp <-
  extra_eval(
    env_calib = sp_pa_2,
    env_proj = somevar,
    n_cores = 1,
    aggreg_factor = 1
  )
plot(xp)
 }
}
\seealso{
\code{\link{extra_exclude}}
}
