% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/correct_colinvar.R
\name{correct_colinvar}
\alias{correct_colinvar}
\title{Perform collinearity reduction on predictors}
\usage{
correct_colinvar(rstack, method, proj = NULL)
}
\arguments{
\item{rstack}{SpatRaster An object of class SpatRaster containing the predictors.}

\item{method}{character. Collinearity reduction method. It is necessary to
provide a vector for this argument. The next methods are implemented:
\itemize{
  \item pearson: Select variables by Pearson correlation, a threshold of maximum correlation must be specified by user. Otherwise a threshold of 0.7 is defined as default. Usage method = c('pearson', th='0.7').
  \item vif: Select variables by Variance Inflation Factor, a threshold can be specified by user. Otherwise a threshold of 10 is defined as default.Usage method = c('vif', th = '10').
  \item pca: Perform a Principal Component Analysis and use the principal components as the new predictors. The selected components account for 95% of the whole variation in the system.Usage method = c('pca').
  \item fa: Perform a Factorial Analysis and select, from the original predictors, the ones with the highest correlation with the axis which account for 95% of the whole variation in the system.Usage method = c('fa').
}}

\item{proj}{character. Path to a folder which contains sub-folders for the different projection scenarios. Only used for pca. Usage "C:/User/Desktop/Projections"}
}
\value{

}
\description{
Perform collinearity reduction on predictors
}
\examples{
\dontrun{
somevar <- system.file("external/somevar.tif", package = "flexsdm")
somevar <- terra::rast(somevar)

#Perform pearson collinearity control
h <- terra::as.data.frame(somevar)
h <- base::abs(stats::cor(h, method = 'pearson'))
diag(h) <- 0

res <- as.list(1:10000)
for(i in 1:10000){
  ord <- base::sample(1:ncol(h))
  h2 <- h[ord,ord]
  h2[upper.tri(h2)] <- 0
  res[[i]] <- names(somevar)[!apply(h2,2,function(x) any(x > 0.7))]
}

len <- sapply(res, function(x) length(x))
sel <- res[[sample(which(len==max(len)),1)]]
rem <- terra::names(rstack)[!names(rstack)\%in\%sel]
rstack <- terra::subset(rstack,subset=sel)
result <- list(
rstack = rstack,
removed_variables = rem,
correlation_table = h
)

#Perform vif collinearity control
VF <- usdm::vifstep(terra::as.data.frame(somevar), th = 10)
rem <- VF@excluded
h <- VF@corMatrix
diag(h) <- 0
rstack <- terra::subset(rstack,subset=VF@variables[!VF@variables\%in\%VF@excluded])
result <- list(
rstack = rstack,
removed_variables = rem,
correlation_table = h
)

#Perform pca collinearity control
p <- terra::as.data.frame(somevar,xy=FALSE,na.rm=TRUE)
p <- stats::prcomp(p, retx = TRUE, scale. = TRUE, center = TRUE)
means <- p$center
stds <- p$scale
cof <- p$rotation
cvar <- summary(p)$importance["Cumulative Proportion", ]
naxis <- Position(function(x) x>=0.95,cvar)
cvar <- data.frame(cvar)
rstack <- terra::predict(rstack,p,index=1:naxis)
result <- list(
rstack = rstack,
coeficients = cof,
cumulative_variance = cvar
)

#Perform fa collinearity control
p <- terra::scale(rstack,center = TRUE, scale = TRUE)
p <- terra::as.data.frame(p,xy=FALSE,na.rm=TRUE)
e <- eigen(cor(p))
ap <- nFactors::parallel(subject=nrow(p),var=ncol(p),rep=100,cent=.05)
nS <- nFactors::nScree(x=e$values, aparallel=ap$eigen$qevpea)
fit <- tryCatch(stats::factanal(x = p, factors = nS$Components$noc, rotation = "varimax", lower = 0.01),
error = function(e) message("Warning: covariance matrix is not invertible. Consider removing highly correlated variables
and trying again or choosing another method to control collinearity."))
sel <- row.names(fit$loadings)[apply(fit$loadings,2,which.max)]
rem <- row.names(fit$loadings)[!row.names(fit$loadings) \%in\% sel]
rstack <- terra::subset(rstack,sel)
result <- list(
rstack = rstack,
removed_variables = rem,
correlation_table = fit$loadings
)

}

}
